{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "id": "nta5sT7dQgBvG1oc6XjKN",
      "type": "text",
      "x": 284.39996337890625,
      "y": 341.4000244140625,
      "width": 1652.8675537109375,
      "height": 630,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a1",
      "roundness": null,
      "seed": 722301253,
      "version": 242,
      "versionNonce": 370835493,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1747629934145,
      "link": null,
      "locked": false,
      "text": "1) What is Node.js, and what JavaScript runtime does it use?\n\n2) What is the difference between user-defined modules and built-in modules in Node.js? \n    Give an example of each.\n\n3) Write a simple script using the fs module’s synchronous method readFileSync to read a file \n    and log its contents.\n\n4) Create a function that uses fs.readFileSync to read two files sequentially, concatenate \n    their contents, and write the result to a new file using fs.writeFileSync.\n\n5) How would you handle errors in synchronous fs operations (e.g., readFileSync) without \n    crashing?\n",
      "fontSize": 36,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1) What is Node.js, and what JavaScript runtime does it use?\n\n2) What is the difference between user-defined modules and built-in modules in Node.js? \n    Give an example of each.\n\n3) Write a simple script using the fs module’s synchronous method readFileSync to read a file \n    and log its contents.\n\n4) Create a function that uses fs.readFileSync to read two files sequentially, concatenate \n    their contents, and write the result to a new file using fs.writeFileSync.\n\n5) How would you handle errors in synchronous fs operations (e.g., readFileSync) without \n    crashing?\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "bpqi1fG4BRZbDPVRC-baN",
      "type": "text",
      "x": 774.7999877929688,
      "y": 212.60000610351562,
      "width": 444.99191284179693,
      "height": 85.94562718353977,
      "angle": 0,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2",
      "roundness": null,
      "seed": 1607387461,
      "version": 102,
      "versionNonce": 1407760549,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1747629453953,
      "link": null,
      "locked": false,
      "text": "Assessment-1",
      "fontSize": 68.75650174683183,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Assessment-1",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "URFE3eWsOQy0_okcGFk2n",
      "type": "text",
      "x": 1227.4167405620562,
      "y": 2073.315404331647,
      "width": 465.7811279296875,
      "height": 85.94562718353978,
      "angle": 0,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a2V",
      "roundness": null,
      "seed": 437504035,
      "version": 248,
      "versionNonce": 1695060208,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1748577305430,
      "link": null,
      "locked": false,
      "text": "Assessment-2",
      "fontSize": 68.75650174683183,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Assessment-2",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "qsmN5hxupjfuivPuymNEh",
      "type": "text",
      "x": 376.88825124305754,
      "y": 1072.1025231868534,
      "width": 1439.17138671875,
      "height": 810,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a3",
      "roundness": null,
      "seed": 1110256452,
      "version": 264,
      "versionNonce": 388891456,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1747978184223,
      "link": null,
      "locked": false,
      "text": "Create a Node.js script that uses the built-in module to:\n\nPerform arithmetic operations (add, subtract, multiply, divide) on two \nhardcoded values (e.g., 10 and 5).\n\nWrite the results of all four operations to a file named results.txt synchronously.\n\nHandle division by zero errors (even though inputs are hardcoded).\n\nFormat the file content as:\n    Addition: 15\n    Subtraction: 5\n    Multiplication: 50\n    Division: 2\n\nIf division by zero occurs, write Division: Error: Division by zero.\n\n",
      "fontSize": 36,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Create a Node.js script that uses the built-in module to:\n\nPerform arithmetic operations (add, subtract, multiply, divide) on two \nhardcoded values (e.g., 10 and 5).\n\nWrite the results of all four operations to a file named results.txt synchronously.\n\nHandle division by zero errors (even though inputs are hardcoded).\n\nFormat the file content as:\n    Addition: 15\n    Subtraction: 5\n    Multiplication: 50\n    Division: 2\n\nIf division by zero occurs, write Division: Error: Division by zero.\n\n",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "0xO6O4h3nv3Xvatg6Fx5K",
      "type": "text",
      "x": 285.08823293251066,
      "y": 1063.7025598079472,
      "width": 37.511993408203125,
      "height": 45,
      "angle": 0,
      "strokeColor": "#1971c2",
      "backgroundColor": "#ffffff",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a4",
      "roundness": null,
      "seed": 1282612732,
      "version": 32,
      "versionNonce": 1282326468,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1747630295095,
      "link": null,
      "locked": false,
      "text": "6)",
      "fontSize": 36,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "6)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "id": "Nst6Q0HZxrdb3Y-6cVwSB",
      "type": "text",
      "x": 584.22367713361,
      "y": 2219.8602468589,
      "width": 1911.7076416015625,
      "height": 1170,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "index": "a5",
      "roundness": null,
      "seed": 1790254435,
      "version": 169,
      "versionNonce": 639709291,
      "isDeleted": false,
      "boundElements": [],
      "updated": 1748842647001,
      "link": null,
      "locked": false,
      "text": "1) Write a function using fs.readFile (callback) to read a file and log its contents. Handle errors \n    properly.\n\n2) Convert the above fs.readFile (callback) example into a Promise-based version using .then() \n    and .catch().\n\n3) Create a basic HTTP server using the http module that responds with \"Hello, World!\" for \n    all requests.\n\n4) What is the role of the event loop in Node.js?\n\n5) Why do synchronous file operations like fs.readFileSync degrade performance in a Node.js server? \n   Explain with respect to the event loop and thread pool.\n\n6) Design a user-defined module that wraps fs.readFileSync and fs.writeFileSync in Promises, and expose\n   methods that can be awaited in another script.\n\n7) Build a simple REST API using the http module that:\n            ==> Accepts GET /users → Returns a mock JSON user list.\n            ==> Accepts POST/register→ register a user with some data\n\n8) Write a Node.js script that connects to a MongoDB database using the official MongoDB Node.js driver. \n   After connecting, insert a sample document into a students collection and retrieve all documents from it.\n \n\n",
      "fontSize": 36,
      "fontFamily": 5,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1) Write a function using fs.readFile (callback) to read a file and log its contents. Handle errors \n    properly.\n\n2) Convert the above fs.readFile (callback) example into a Promise-based version using .then() \n    and .catch().\n\n3) Create a basic HTTP server using the http module that responds with \"Hello, World!\" for \n    all requests.\n\n4) What is the role of the event loop in Node.js?\n\n5) Why do synchronous file operations like fs.readFileSync degrade performance in a Node.js server? \n   Explain with respect to the event loop and thread pool.\n\n6) Design a user-defined module that wraps fs.readFileSync and fs.writeFileSync in Promises, and expose\n   methods that can be awaited in another script.\n\n7) Build a simple REST API using the http module that:\n            ==> Accepts GET /users → Returns a mock JSON user list.\n            ==> Accepts POST/register→ register a user with some data\n\n8) Write a Node.js script that connects to a MongoDB database using the official MongoDB Node.js driver. \n   After connecting, insert a sample document into a students collection and retrieve all documents from it.\n \n\n",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": 20,
    "gridStep": 5,
    "gridModeEnabled": false,
    "viewBackgroundColor": "#f5faff"
  },
  "files": {}
}